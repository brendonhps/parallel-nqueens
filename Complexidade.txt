Complexidade espacial. 
    - Cada thread (p) necessita de um vetor de tamanho n 
      (index indica a coluna e valor indica alinha de cada rainha).
    - Assim complexidade espacial = p x N, ou seja O(N)


Complexidade Temporal
    - Verificação da posição da rainha é O(M), sendo M a posição da rainha verificada (comparações a esquerda = M, comparações nas diagonais = max{ {linha_rainha,  N - linha rainha, M}, ou seja, aproximadamente 2M, logo O(M))
    - Cada rainha poderá assumir N posições, ou seja O(N), processo que será repetido N vezes, logo O(N²)

Assim, pode-se modelar a função recursiva T(N) = O(N²) + N * T(N-1), assim, removendo a recorrência:

T(N) = O(N^2) + N * T(N-1)

       O(N^2) + N * (O(N^2) + (N-1) * T(N-2))

       O(N^@) + N * (O(N^2) + (N-1) * (O(N^2) + (N-2) * T(N-3))) ...

chegamos ao termo O(N²) + (N(N - 1))/2 * O(N^2) + N! = O(N²) + O(N^4) + O(N!), e como sabermos que o termo O(N!) sobresai aos demais termos, então, no pior caso, temos o problema das rainhas tem complexidade O(N!)